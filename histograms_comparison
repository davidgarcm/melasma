# Import packages 

from scipy.spatial import distance as dist 
import matplotlib.pyplot as plt 
import numpy as np 	
import argparse
import glob
import cv2

# construct the argument parser and parse arguments
ap = argparse.ArgumentParser()
ap.add_argument("-d", "--dataset", required = True, 
	help = "Path to the directory of images")
args = vars(ap.parse_args())

# "index" dictionary to store the image name as a key with its 
# corresponding histograms and the "images" dictionary to 
# store the images themselves 

index = {}
images = {}
# Extract the histograms from our dataset

#Loop over the image paths
for imagePath in glob.glob(args["dataset"] + "/*.png"):
	#extract the image filename and load the image, updating the 
	#"images" dictionary
	filename = imagePath[imagePath.rfind("/") + 1:]
	image = cv2.imread(imagePath)
	images[filename] = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

	#Extract a 3D RGB color histogram from the image using 8 bins per channel
	#normalize, and update the index. 
	hist = cv2.calcHist([image], [0,1,2], None, [8,8,8],
		[0,256,0,256,0,256])
	hist = cv2.normalize(hist, hist).flatten()
	index[filename] = hist 
	plt.plot(hist)
	plt.show()

# Initialize OpenCV methods for histogram comparison 
OPENCV_METHODS = (
	("Correlation", cv2.HISTCMP_CORREL),
	("Chi-Squared", cv2.HISTCMP_CHISQR),
	("Intersection", cv2.HISTCMP_INTERSECT),
	("Hellinger", cv2.HISTCMP_BHATTACHARYYA))

# Loop over the comparison methods 
for (methodName, method) in OPENCV_METHODS:
	#Create "results" dictionary and the sort direction
	results = {}
	reverse = False
	# if we are using the "correlation" or "intersection" meyhos, 
	# sort the results in reverse mode
	if methodName in ("Correlation", "Intersection"):
		reverse = True 
	for (k, hist) in index.items():
		# compute the distance between the two histograms
		# using the method and update the results dictionary
		d = cv2.compareHist(index["paciente_uno_frente_despues.png"], hist, method)
		results[k] = d
	# Sort the results
	results = sorted([(v,k) for (k,v) in results.items()], reverse = reverse)
	# Show the query image 
	fig = plt.figure("Query")
	ax = fig.add_subplot(1, 1, 1)
	ax.imshow(images["paciente_uno_frente_despues.png"])
	plt.axis("off")
 
	# initialize the results figure
	fig = plt.figure("Results: %s" % (methodName))
	fig.suptitle(methodName, fontsize = 20)
 
	# loop over the results
	for (i, (v, k)) in enumerate(results):
		# show the result
		ax = fig.add_subplot(1, len(images), i + 1)
		ax.set_title("%s: %.2f" % (k, v))
		plt.imshow(images[k])
		plt.axis("off")
 
# show the OpenCV methods
plt.show()
